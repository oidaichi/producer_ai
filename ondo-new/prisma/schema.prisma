// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  password      String
  role          Role      @default(USER)
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  accounts      Account[]
  sessions      Session[]
  events        Event[]   @relation("EventOrganizer")
  participations Participation[]
  documents     Document[]

  @@map("users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Event {
  id            String         @id @default(cuid())
  title         String
  description   String?
  location      String?
  startDate     DateTime       @map("start_date")
  endDate       DateTime       @map("end_date")
  capacity      Int            @default(0)
  status        EventStatus    @default(DRAFT)
  organizerId   String         @map("organizer_id")
  organizer     User           @relation("EventOrganizer", fields: [organizerId], references: [id])
  participations Participation[]
  documents     Document[]
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")

  @@map("events")
}

model Participant {
  id            String         @id @default(cuid())
  name          String
  email         String
  phone         String?
  organization  String?
  position      String?
  notes         String?
  participations Participation[]
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")

  @@unique([email])
  @@map("participants")
}

model Participation {
  id             String     @id @default(cuid())
  eventId        String     @map("event_id")
  event          Event      @relation(fields: [eventId], references: [id])
  participantId  String     @map("participant_id")
  participant    Participant @relation(fields: [participantId], references: [id])
  status         ParticipationStatus @default(PENDING)
  registeredAt   DateTime   @default(now()) @map("registered_at")
  attendedAt     DateTime?  @map("attended_at")
  notes          String?

  @@unique([eventId, participantId])
  @@map("participations")
}

model Document {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        String
  size        Int
  url         String
  eventId     String?  @map("event_id")
  event       Event?   @relation(fields: [eventId], references: [id])
  uploadedById String   @map("uploaded_by_id")
  uploadedBy  User     @relation(fields: [uploadedById], references: [id])
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("documents")
}

enum Role {
  USER
  ADMIN
  ORGANIZER
}

enum EventStatus {
  DRAFT
  PUBLISHED
  CANCELLED
  COMPLETED
}

enum ParticipationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  WAITLISTED
  ATTENDED
  NOSHOW
}
